kind: pipeline
type: docker
name: default

steps:
  # - name: start
  #   image: fifsky/drone-wechat-work
  #   pull: if-not-exists
  #   settings:
  #     url:
  #       from_secret: wecom_bot_url
  #     msgtype: markdown
  #     content: |
  #       #### 🎉 ${DRONE_REPO} 已提交，开始执行 CI/CD
  #       > Author: ${DRONE_COMMIT_AUTHOR}
  #       {{ if ne .Event "tag" -}}
  #       > Branch: ${DRONE_COMMIT_BRANCH}
  #       {{ end -}}
  #       > Event: ${DRONE_BUILD_EVENT}
  #       > Runner: ${DRONE_STAGE_MACHINE}
  #       > Commit: [{{ .Message }}](${DRONE_COMMIT_LINK})
  #       > [点击查看](${DRONE_BUILD_LINK})

  - name: restore cache
    image: drillster/drone-volume-cache
    pull: if-not-exists
    depends_on:
      # - start
    volumes:
      - name: cache
        path: /cache # fixed, can't be change
    settings:
      restore: true
      mount: # list of folders or files to cache
        - ./.pnpm-store

  - name: install dependencies
    pull: if-not-exists
    image: node:22
    depends_on:
      - restore cache
    commands:
      - cd /drone/src/web
      - corepack enable
      - corepack prepare pnpm@latest --activate
      - pnpm config set store-dir .pnpm-store
      - pnpm install

  - name: rebuild cache
    image: drillster/drone-volume-cache
    depends_on:
      - install dependencies
    pull: if-not-exists
    volumes:
      - name: cache
        path: /cache
    settings:
      rebuild: true
      mount:
        - ./.pnpm-store

  - name: check code styles
    image: node:22
    pull: if-not-exists
    depends_on:
      - install dependencies
    commands:
      - cd /drone/src/web
      - corepack enable
      - corepack prepare pnpm@latest --activate
      - pnpm lint

  - name: build web
    image: node:22
    pull: if-not-exists
    depends_on:
      - install dependencies
      - check code styles
    commands:
      - cd /drone/src/web
      - corepack enable
      - corepack prepare pnpm@latest --activate
      - pnpm config set store-dir .pnpm-store
      - pnpm build
      # 创建frontend目录结构（用于Docker构建上下文）
      - mkdir -p frontend
      - cp -r apps/frontend/* frontend/
    volumes:
      - name: frontend_build
        path: /drone/src/frontend

  - name: compile go
    image: crazymax/goxx:latest
    pull: if-not-exists
    environment:
      CGO_ENABLED: '1'
      GO111MODULE: 'on'
    commands:
      - goxx-go build -v -o hysaif-api -ldflags "-X 'git.uozi.org/uozi/hysaif-uozi/settings.buildTime=$(date +%s)'" main.go
      - cp -r hysaif-api /drone/src/api
    volumes:
      - name: go_cache
        path: /go/pkg
      - name: api_build
        path: /drone/src/api

  - name: build and push docker image
    image: plugins/docker
    privileged: true
    pull: if-not-exists
    depends_on:
      - build web
      - compile go
    settings:
      repo: registry.cn-shenzhen.aliyuncs.com/uozi/hysaif
      registry: registry.cn-shenzhen.aliyuncs.com
      tags:
        - latest
        - ${DRONE_BUILD_NUMBER}
      dockerfile: deploy/Dockerfile
      context: .
      username:
        from_secret: aliyun_registry_username
      password:
        from_secret: aliyun_registry_password
      mirror: https://dockerhub.langgood.com
    volumes:
      - name: api_build
        path: /drone/src/api
      - name: frontend_build
        path: /drone/src/frontend
    when:
      event:
        - push
      branch:
        - main

  - name: deploy to k8s
    image: bitnami/kubectl:latest
    pull: if-not-exists
    depends_on:
      - build and push docker image
    environment:
      KUBECONFIG_DATA:
        from_secret: k8s_kubeconfig_uozi_sz
    commands:
      - mkdir -p ~/.kube
      - echo "$KUBECONFIG_DATA" > ~/.kube/config
      - kubectl -n hysaif set image deployment/hysaif hysaif=registry.cn-shenzhen.aliyuncs.com/uozi/hysaif:${DRONE_BUILD_NUMBER}
      - kubectl -n hysaif annotate deployment/hysaif kubernetes.io/change-cause="Deploy build ${DRONE_BUILD_NUMBER} by Drone" --overwrite
      - kubectl -n hysaif rollout status deployment/hysaif --timeout=180s
    when:
      event:
        - push
      branch:
        - main

  # - name: notify
  #   image: fifsky/drone-wechat-work
  #   pull: if-not-exists
  #   depends_on:
  #     - build web
  #     - compile go
  #     - build and push docker image
  #     - rebuild cache
  #     - deploy to k8s
  #   settings:
  #     url:
  #       from_secret: wecom_bot_url
  #     msgtype: markdown
  #     content: |
  #       {{ if eq .Status "success" }}
  #       #### 🎉 ${DRONE_REPO} 构建成功
  #       {{ else }}
  #       #### ❌ ${DRONE_REPO} 构建失败
  #       {{ end }}
  #       > Author: ${DRONE_COMMIT_AUTHOR}
  #       > Event: ${DRONE_BUILD_EVENT}
  #       > Runner: ${DRONE_STAGE_MACHINE}
  #       > Commit: [{{ .Message }}](${DRONE_COMMIT_LINK})
  #       > [点击查看](${DRONE_BUILD_LINK})
  #   when:
  #     status: [success, failure]

services:
  - name: mysql-server
    image: mysql:latest
    pull: if-not-exists
    environment:
      MYSQL_DATABASE: drone
      MYSQL_USER: drone
      MYSQL_PASSWORD: drone
      MYSQL_RANDOM_ROOT_PASSWORD: true

  - name: redis-server
    pull: if-not-exists
    image: redis:latest

volumes:
  - name: cache
    host:
      path: /tmp/pnpm_cache # host volume absolute path
  - name: go_cache
    host:
      path: /tmp/go_cache # host volume absolute path
  - name: api_build
    temp: {}
  - name: frontend_build
    temp: {}

trigger:
  event:
    - push
    - pull_request
